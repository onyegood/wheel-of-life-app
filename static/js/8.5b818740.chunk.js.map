{"version":3,"sources":["redux/actions/message.js","helpers/CustomInputComponent.js","pages/auth/LoginPage.js","pages/auth/validator/LoginValidations.js"],"names":["clearMessage","type","CLEAR_MESSAGE","CustomInputComponent","field","form","touched","errors","props","className","name","disabled","title","mapDispatchToState","fetchCurrentUserRequest","submit","loginUserRequests","FormikConnect","withFormik","mapPropsToValues","email","password","validationSchema","Yup","shape","required","min","handleSubmit","values","a","resetForm","setErrors","setSubmitting","setTimeout","connect","state","message","isSubmitting","id","for","src","pattern","emailPattern","placeholder","component","to"],"mappings":"gHAAA,8CAIaA,EAAe,iBAAO,CAAEC,KAAMC,O,sICF9BC,EAAuB,SAAC,GAI9B,IAHLC,EAGI,EAHJA,MAGI,IAFJC,KAAQC,EAEJ,EAFIA,QAASC,EAEb,EAFaA,OACdC,EACC,gCACJ,OACE,yBAAKC,UAAWH,EAAQF,EAAMM,OAASH,EAAOH,EAAMM,MAAQ,wBAA0B,cACpF,8BAAUC,SAAS,IACfH,EAAMI,MACN,2BAAOH,UAAU,QACf,2BAAID,EAAMI,QAEV,KACJ,2CACMR,EAAWI,EADjB,CAEEC,UAAWH,EAAQF,EAAMM,OAASH,EAAOH,EAAMM,MAAQ,0BAA4B,eACnFC,SAAS,MACVL,EAAQF,EAAMM,OAASH,EAAOH,EAAMM,OAAS,yBAAKD,UAAU,oBAAoBF,EAAOH,EAAMM,U,gBC0DhGG,EAAqB,CACzBC,4BACAd,iBACAe,OAAQC,KAGJC,EAAgBC,YAAW,CAC/BC,iBAD+B,YAE7B,MAAO,CACLC,MAFkC,EAAnBA,OAEC,sBAChBC,SAHkC,EAAZA,UAGA,aAG1BC,iBCvFEC,WAAaC,MAAM,CACjBJ,MAAOG,WAAaH,MAAM,gDAAgDK,SAAS,qBACnFJ,SAAUE,WAAaG,IAAI,EAAG,0CAA0CD,SAAS,0BDsFrFE,aAAa,WAAD,4BAAE,WAAOC,EAAP,sBAAAC,EAAA,sDAAiBrB,EAAjB,EAAiBA,MAAOsB,EAAxB,EAAwBA,UAAxB,EAAmCC,UAAWC,EAA9C,EAA8CA,cAC1DxB,EAAMO,OAAOa,GACbK,YAAW,WACTzB,EAAMR,eACN8B,IACAE,GAAc,KACb,KANS,2CAAF,qDAAC,KAUAE,uBA9BS,SAACC,GACvB,MAAO,CACLC,QAASD,EAAMC,WA4BqBvB,EAAzBqB,CAA6CjB,GA1F1C,SAACT,GAAW,IACpB6B,EAA0B7B,EAA1B6B,aAAcD,EAAY5B,EAAZ4B,QAEtB,OACE,yBAAK3B,UAAU,mBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,aACZ2B,GAAWA,EAAQA,QAAU,uBAAG3B,UAAU,sBAAsB2B,EAAQA,SAAe,KAExF,kBAAC,IAAD,CACEE,GAAG,eACH7B,UAAU,6CACV,2BAAOA,UAAU,OAAO8B,IAAI,gBAC1B,yBAAKC,IAAI,0BAGX,kBAAC,IAAD,CACE9B,KAAK,QACLE,MAAM,QACNX,KAAK,QACLwC,QAASC,IACTC,YAAY,gBACZC,UAAWzC,IAGb,kBAAC,IAAD,CACEO,KAAK,WACLE,MAAM,WACNX,KAAK,WACL0C,YAAY,WACZC,UAAWzC,IAGb,kBAAC,IAAD,CAAM0C,GAAG,KAAT,qBAIA,4BAAQlC,SAAU0B,EAAc5B,UAAU,wDACvC4B,EAAe,uBAAG5B,UAAU,gCAAmC,eAO1E,yBAAKA,UAAU,YACb,yBAAK+B,IAAI,qBAAqB/B,UAAU","file":"static/js/8.5b818740.chunk.js","sourcesContent":["import {\n    CLEAR_MESSAGE\n} from \"../types/message\";\n\nexport const clearMessage = () => ({ type: CLEAR_MESSAGE });","import React from \"react\";\n\nexport const CustomInputComponent = ({\n  field,\n  form: { touched, errors }, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n  ...props\n}) => {\n  return (\n    <div className={touched[field.name] && errors[field.name] ? \"form-group has-danger\" : \"form-group\"}>\n      <fieldset disabled=\"\">\n        { props.title ?\n          <label className=\"mt-4\">\n            <b>{props.title}</b>\n          </label> \n          : null}\n        <input\n          {...field} {...props}\n          className={touched[field.name] && errors[field.name] ? \"form-control is-invalid\" : \"form-control\"}\n          disabled=\"\" />\n        {touched[field.name] && errors[field.name] && <div className=\"invalid-feedback\">{errors[field.name]}</div>}\n      </fieldset>\n    </div>\n  );\n};","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { withFormik, Form, Field } from \"formik\";\nimport { fetchCurrentUserRequest, loginUserRequests } from \"../../redux/actions/auth\";\nimport { toast } from \"react-toastify\";\nimport { Link } from \"react-router-dom\";\nimport { clearMessage } from \"../../redux/actions/message\";\nimport { CustomInputComponent } from \"../../helpers/CustomInputComponent\";\nimport { LoginValidations } from \"./validator/LoginValidations\";\nimport { emailPattern } from \"../../helpers\";\n\nconst LoginPage = (props) => {\n  const { isSubmitting, message } = props;\n\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"container\">\n        <div className=\"auth-page\">\n          <div className=\"row\">\n            <div className=\"col-lg-5\">\n              <div className=\"card p-3 mt-2\">\n                <div className=\"card-body\">\n                  {message && message.message ? <p className=\"alert alert-danger\">{message.message}</p> : null}\n\n                  <Form\n                    id=\"sign-in-form\"\n                    className=\"aut sign-in-form box-shad-padded bg-white\">\n                    <label className=\"mb-5\" for=\"sign-up-form\">\n                      <img src=\"/assets/img/logo.svg\" />\n                    </label>\n\n                    <Field\n                      name=\"email\"\n                      title=\"Email\"\n                      type=\"email\"\n                      pattern={emailPattern}\n                      placeholder=\"Email address\"\n                      component={CustomInputComponent}\n                    />\n\n                    <Field\n                      name=\"password\"\n                      title=\"Password\"\n                      type=\"password\"\n                      placeholder=\"Password\"\n                      component={CustomInputComponent}\n                    />\n\n                    <Link to=\"/\">\n                        forgot password ?\n                    </Link>\n\n                    <button disabled={isSubmitting} className=\"mt-5 mb-5 btn-success-onye btn btn-success btn-block\">\n                      {isSubmitting ? <i className=\"fa fa-2x fa-spinner fa-spin\" /> : \"Sign in\"}\n                    </button>\n                  </Form>\n                </div>\n              </div>\n\n            </div>\n            <div className=\"col-lg-7\">\n              <img src=\"/assets/img/bg.png\" className=\"img-fluid\" />\n            </div>\n          </div>\n        \n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    message: state.message\n  };\n};\n\nconst mapDispatchToState = {\n  fetchCurrentUserRequest,\n  clearMessage,\n  submit: loginUserRequests\n};\n\nconst FormikConnect = withFormik({\n  mapPropsToValues({ email, password }) {\n    return {\n      email: email || \"goodnews@softcom.ng\",\n      password: password || \"password\"\n    };\n  },\n  validationSchema: LoginValidations(),\n  handleSubmit: async (values, { props, resetForm, setErrors, setSubmitting }) => {\n    props.submit(values);\n    setTimeout(() => {\n      props.clearMessage();\n      resetForm();\n      setSubmitting(false);\n    }, 500);\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToState)(FormikConnect(LoginPage));","import * as Yup from \"yup\";\nexport const LoginValidations = () => {\n  return (\n    Yup.object().shape({\n      email: Yup.string().email(\"Invalid email, please provide a valid email.\").required(\"Email is required\"),\n      password: Yup.string().min(5, \"Password must be at least 5 characters\").required(\"Password is required\")\n    })\n  );\n};"],"sourceRoot":""}